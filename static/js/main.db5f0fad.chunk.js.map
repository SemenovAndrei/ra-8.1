{"version":3,"sources":["hooks/useJsonFetch.js","components/ShowSpinner/Loading_icon.gif","components/ShowSpinner/ShowSpinner.jsx","components/Details/Details.jsx","components/List/List.jsx","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","options","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","response","status","Error","statusText","ok","json","getData","Spinner","styled","img","ShowSpinner","src","spinner","alt","Element","div","Wrapper","ImgWrapper","Img","Item","Details","props","process","info","id","message","avatar","name","Object","keys","details","map","key","index","List","onClick","event","target","list","el","data-name","App","setInfo","className","dataset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db5f0fad.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\n/**\n * Fetch to url\n *\n * @param {string} url - URL\n * @param {object} options - Options to request\n * @returns [ loading, error, data ]\n */\nexport default function useJsonFetch(url, options) {\n  const [data, setData] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true)\n      setError('')\n\n      try {\n        const response = await fetch(url, options)\n\n        if (response.status !== 200) {\n          throw new Error(\n            'Network error: ' + response.status + '  ' + response.statusText\n          )\n        }\n\n        if (response.ok) {\n          const json = await response.json()\n\n          if (!json) {\n            throw new Error('parsing error')\n          }\n          setData(json)\n        }\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    getData()\n  }, [options, url])\n\n  return [loading, error, data]\n}\n","export default __webpack_public_path__ + \"static/media/Loading_icon.1a32f552.gif\";","import React from 'react'\nimport styled from 'styled-components'\nimport spinner from './Loading_icon.gif'\n\nconst Spinner = styled.img`\n  width: 100px;\n  height: 100px;\n`\n\nexport default function ShowSpinner() {\n  return <Spinner src={spinner} alt=\"Loading\"></Spinner>\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport useJsonFetch from '../../hooks/useJsonFetch'\nimport ShowSpinner from '../ShowSpinner/ShowSpinner'\nimport styled from 'styled-components'\n\nconst Element = styled.div`\n  width: 50%;\n`\n\nconst Wrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid black;\n`\nconst ImgWrapper = styled.div`\n  height: 350px;\n  margin-bottom: 10px;\n  overflow: hidden;\n`\nconst Img = styled.img`\n  display: block;\n  width: 100%;\n  height: 350px;\n  object-fit: cover;\n\n  :hover {\n    transform: scale(1.1);\n\n    transition: transform 0.4s linear;\n  }\n`\nconst Item = styled.div`\n  width: 100%;\n\n  :not(:last-child)::after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 1px;\n    margin: 10px 0;\n    background-color: black;\n  }\n`\n\nfunction Details(props) {\n  const [loading, error, data] = useJsonFetch(\n    `${process.env.REACT_APP_URL_DATA}/${props.info.id}.json`\n  )\n  return (\n    <Element>\n      {loading && <ShowSpinner />}\n      {error && error.message}\n      {!loading && data && (\n        <Wrapper key={data.id}>\n          <ImgWrapper>\n            <Img src={data.avatar} alt=\"avatar\" />\n          </ImgWrapper>\n          <Item>{data.name}</Item>\n          {Object.keys(data.details).map((key, index) => (\n            <Item key={index}>{key + ': ' + data.details[key]}</Item>\n          ))}\n        </Wrapper>\n      )}\n    </Element>\n  )\n}\n\nDetails.propTypes = {\n  info: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n}\n\nexport default Details\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  width: 35%;\n  padding: 10px;\n  border: 1px solid black;\n`\nconst Item = styled.div`\n  cursor: pointer;\n\n  :not(:last-child)::after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 1px;\n    margin: 10px 0;\n    background-color: black;\n  }\n`\n\nfunction List(props) {\n  const onClick = (event) => {\n    props.onClick(event.target)\n  }\n\n  return (\n    <Wrapper>\n      {props.list.map((el) => (\n        <Item key={el.id} id={el.id} data-name={el.name} onClick={onClick}>\n          {el.name}\n        </Item>\n      ))}\n    </Wrapper>\n  )\n}\n\nList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n}\n\nexport default List\n","import { useState } from 'react'\nimport './App.css'\nimport Details from './components/Details/Details'\nimport List from './components/List/List'\nimport ShowSpinner from './components/ShowSpinner/ShowSpinner'\nimport useJsonFetch from './hooks/useJsonFetch'\n\nfunction App() {\n  const [info, setInfo] = useState({\n    id: '',\n    name: '',\n  })\n\n  const [loading, error, data] = useJsonFetch(\n    `${process.env.REACT_APP_URL_DATA}/users.json`\n  )\n\n  const handleUserInfo = (el) => {\n    if (el.id === info.id) {\n      return\n    }\n\n    setInfo({ id: el.id, name: el.dataset.name })\n  }\n\n  return (\n    <div className=\"App\">\n      {loading && <ShowSpinner />}\n      {error && error.message}\n      {data && <List list={data} onClick={handleUserInfo} />}\n      {info.id && <Details info={info} />}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}